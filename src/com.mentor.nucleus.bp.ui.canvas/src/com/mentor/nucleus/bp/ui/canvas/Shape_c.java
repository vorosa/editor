package com.mentor.nucleus.bp.ui.canvas;
//====================================================================
//
// File:      com.mentor.nucleus.bp.ui.canvas.Shape_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import org.eclipse.swt.graphics.GC;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.swt.graphics.Color;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SHAPE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Shape_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Shape_c(ModelRoot modelRoot, java.util.UUID p_m_elementid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}
	static public Shape_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_elementid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
		Shape_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			new_inst = (Shape_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Shape_c(modelRoot, p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Shape_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_elementid) {
		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
		Shape_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_elementid};
			source = (Shape_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_elementid = IdAssigner.preprocessUUID(p_m_elementid);

				return source;
			}
		}
		// there is no instance matching the id
		Shape_c new_inst = new Shape_c(modelRoot, p_m_elementid);
		return new_inst;
	}
	public Shape_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_elementid = IdAssigner.NULL_UUID;
		Object[] key = {m_elementid};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_elementid};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_elementid != p_newKey) {

			m_elementid = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Shape_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Shape_c)) {
			return false;
		}

		Shape_c me = (Shape_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if ((IdAssigner.NULL_UUID.equals(getElementid()) || IdAssigner.NULL_UUID
				.equals(((Shape_c) elem).getElementid())) && this != elem) {
			return false;
		}
		if (!getElementid().equals(((Shape_c) elem).getElementid()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Shape_c)) {
			return false;
		}

		Shape_c me = (Shape_c) elem;
		if (!getElementidCachedValue().equals(
				((Shape_c) elem).getElementidCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_elementid;

	// declare association references from this class

	// referring navigation

	Graphnode_c IsSupertypeGraphnode;
	public void relateAcrossR19To(Graphnode_c target) {
		relateAcrossR19To(target, true);
	}
	public void relateAcrossR19To(Graphnode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGraphnode)
			return; // already related

		if (IsSupertypeGraphnode != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGraphnode != null) {

				IsSupertypeGraphnode.clearBackPointerR19To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Shape_c.relateAcrossR19To(Graphnode_c target)",
									"Relate performed across R19 from Shape to GraphNode without unrelate of prior instance.");
				}
			}

			IsSupertypeGraphnode = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR19To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "19", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR19From(Graphnode_c target) {
		unrelateAcrossR19From(target, true);
	}
	public void unrelateAcrossR19From(Graphnode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGraphnode == null)
			return; // already unrelated

		if (target != IsSupertypeGraphnode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin
					.logError(
							"Tried to unrelate from non-related instance across R19",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR19To(this);
		}

		if (IsSupertypeGraphnode != null) {

			m_elementid = IsSupertypeGraphnode.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeGraphnode.getElementidCachedValue();
			}
			IsSupertypeGraphnode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "19", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Shape_c getOneGD_SHPOnR19(Graphnode_c[] targets) {
		return getOneGD_SHPOnR19(targets, null);
	}

	public static Shape_c getOneGD_SHPOnR19(Graphnode_c[] targets,
			ClassQueryInterface_c test) {
		Shape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_SHPOnR19(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Shape_c getOneGD_SHPOnR19(Graphnode_c target) {
		return getOneGD_SHPOnR19(target, null);
	}

	public static Shape_c getOneGD_SHPOnR19(Graphnode_c target,
			boolean loadComponent) {
		return getOneGD_SHPOnR19(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Shape_c getOneGD_SHPOnR19(Graphnode_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_SHPOnR19(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Shape_c getOneGD_SHPOnR19(ModelRoot modelRoot,
			Graphnode_c target, ClassQueryInterface_c test) {
		return getOneGD_SHPOnR19(modelRoot, target, test, true);
	}

	public static Shape_c getOneGD_SHPOnR19(ModelRoot modelRoot,
			Graphnode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneGD_SHPOnR19(modelRoot, target, test);
	}
	private static Shape_c find_getOneGD_SHPOnR19(ModelRoot modelRoot,
			Graphnode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Shape_c source = (Shape_c) target.backPointer_IsSubtypeShapeIsSubtype_R19;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c[] targets) {
		return getManyGD_SHPsOnR19(targets, null);
	}
	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c[] targets,
			boolean loadComponent) {
		return getManyGD_SHPsOnR19(targets, null, loadComponent);
	}
	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR19(targets, test, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Shape_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Shape_c source = (Shape_c) targets[i].backPointer_IsSubtypeShapeIsSubtype_R19;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Shape_c[] ret_set = new Shape_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Shape_c[0];
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c target) {
		if (target != null) {
			Graphnode_c[] targetArray = new Graphnode_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR19(targetArray);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR19(Graphnode_c target,
			boolean loadComponent) {
		if (target != null) {
			Graphnode_c[] targetArray = new Graphnode_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR19(targetArray, loadComponent);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}
	}

	// referring navigation

	GraphicalElement_c IsSupertypeGraphicalElement;
	public void relateAcrossR2To(GraphicalElement_c target) {
		relateAcrossR2To(target, true);
	}
	public void relateAcrossR2To(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeGraphicalElement)
			return; // already related

		if (IsSupertypeGraphicalElement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeGraphicalElement != null) {

				IsSupertypeGraphicalElement.clearBackPointerR2To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofgraphics.log
							.println(
									ILogger.CONSISTENCY,
									"Shape_c.relateAcrossR2To(GraphicalElement_c target)",
									"Relate performed across R2 from Shape to Graphical Element without unrelate of prior instance.");
				}
			}

			IsSupertypeGraphicalElement = target;
			if (IdAssigner.NULL_UUID.equals(target.getElementid())) {
				// do not update cached value
			} else {
				// update cached value
				m_elementid = target.getElementidCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR2To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "2", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR2From(GraphicalElement_c target) {
		unrelateAcrossR2From(target, true);
	}
	public void unrelateAcrossR2From(GraphicalElement_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeGraphicalElement == null)
			return; // already unrelated

		if (target != IsSupertypeGraphicalElement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CanvasPlugin.logError(
					"Tried to unrelate from non-related instance across R2", e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR2To(this);
		}

		if (IsSupertypeGraphicalElement != null) {

			m_elementid = IsSupertypeGraphicalElement.getElementid();
			if (IdAssigner.NULL_UUID.equals(m_elementid)) {
				m_elementid = IsSupertypeGraphicalElement
						.getElementidCachedValue();
			}
			IsSupertypeGraphicalElement = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "2", "");
				Ooaofgraphics.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Shape_c getOneGD_SHPOnR2(GraphicalElement_c[] targets) {
		return getOneGD_SHPOnR2(targets, null);
	}

	public static Shape_c getOneGD_SHPOnR2(GraphicalElement_c[] targets,
			ClassQueryInterface_c test) {
		Shape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneGD_SHPOnR2(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Shape_c getOneGD_SHPOnR2(GraphicalElement_c target) {
		return getOneGD_SHPOnR2(target, null);
	}

	public static Shape_c getOneGD_SHPOnR2(GraphicalElement_c target,
			boolean loadComponent) {
		return getOneGD_SHPOnR2(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Shape_c getOneGD_SHPOnR2(GraphicalElement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneGD_SHPOnR2(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Shape_c getOneGD_SHPOnR2(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test) {
		return getOneGD_SHPOnR2(modelRoot, target, test, true);
	}

	public static Shape_c getOneGD_SHPOnR2(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneGD_SHPOnR2(modelRoot, target, test);
	}
	private static Shape_c find_getOneGD_SHPOnR2(ModelRoot modelRoot,
			GraphicalElement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Shape_c source = (Shape_c) target.backPointer_IsSubtypeShapeIsSubtype_R2;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c[] targets) {
		return getManyGD_SHPsOnR2(targets, null);
	}
	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c[] targets,
			boolean loadComponent) {
		return getManyGD_SHPsOnR2(targets, null, loadComponent);
	}
	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR2(targets, test, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Shape_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Shape_c source = (Shape_c) targets[i].backPointer_IsSubtypeShapeIsSubtype_R2;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Shape_c[] ret_set = new Shape_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Shape_c[0];
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c target) {
		if (target != null) {
			GraphicalElement_c[] targetArray = new GraphicalElement_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR2(targetArray);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR2(GraphicalElement_c target,
			boolean loadComponent) {
		if (target != null) {
			GraphicalElement_c[] targetArray = new GraphicalElement_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR2(targetArray, loadComponent);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	FloatingText_c backPointer_HasTextFloatingTextHasText_R27;

	public void setFloatingTextOrderInChildListR27(FloatingText_c target,
			int index) {
		unrelateAcrossR27From(target);
		FloatingText_c[] elements = FloatingText_c.getManyGD_CTXTsOnR27(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR27From((FloatingText_c) elements[i]);
			}
			count++;
		}
		relateAcrossR27To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR27To((FloatingText_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR27To(FloatingText_c target) {
		if (target != null) {
			target.relateAcrossR27To(this, true);
		}
	}

	public void relateAcrossR27To(FloatingText_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR27To(this, notifyChanges);
		}
	}

	public void setBackPointerR27To(FloatingText_c target) {
		backPointer_HasTextFloatingTextHasText_R27 = target;
	}

	public void unrelateAcrossR27From(FloatingText_c target) {
		if (target != null) {
			target.unrelateAcrossR27From(this, true);
		}
	}

	public void unrelateAcrossR27From(FloatingText_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR27From(this, notifyChanges);
		}
	}

	public void clearBackPointerR27To(FloatingText_c target) {
		if (target == backPointer_HasTextFloatingTextHasText_R27) {
			backPointer_HasTextFloatingTextHasText_R27 = null;
		}
	}

	public static Shape_c getOneGD_SHPOnR27(FloatingText_c[] targets) {
		return getOneGD_SHPOnR27(targets, null);
	}

	public static Shape_c getOneGD_SHPOnR27(FloatingText_c[] targets,
			ClassQueryInterface_c test) {
		return getOneGD_SHPOnR27(targets, test, true);
	}

	public static Shape_c getOneGD_SHPOnR27(FloatingText_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Shape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Shape_c candidate_val = getOneGD_SHPOnR27(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneGD_SHPOnR27(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Shape_c getOneGD_SHPOnR27(FloatingText_c target) {
		return getOneGD_SHPOnR27(target, true);
	}
	public static Shape_c getOneGD_SHPOnR27(FloatingText_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsTextForShape;
		} else {
			return null;
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR27(targets, test, true);
	}

	public static Shape_c [] getManyGD_SHPsOnR27(FloatingText_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Shape_c[0];
  
  
  LinkedHashSet<Shape_c> elementsSet = new LinkedHashSet<Shape_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsTextForShape == null)
	  targets[i].loadProxy();
    Shape_c associate = targets[i].IsTextForShape;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Shape_c[] result = new Shape_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c[] targets) {
		return getManyGD_SHPsOnR27(targets, null);
	}

	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			FloatingText_c[] targetArray = new FloatingText_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR27(targetArray, test, loadComponent);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}

	}

	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c target,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR27(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c target) {
		return getManyGD_SHPsOnR27(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR27(FloatingText_c target,
			boolean loadComponent) {
		return getManyGD_SHPsOnR27(target, null, loadComponent);
	}

	// referred to navigation

	NoncontainingShape_c backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28;

	public void setNoncontainingShapeOrderInChildListR28(
			NoncontainingShape_c target, int index) {
		unrelateAcrossR28From(target);
		NoncontainingShape_c[] elements = NoncontainingShape_c
				.getManyGD_NCSsOnR28(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR28From((NoncontainingShape_c) elements[i]);
			}
			count++;
		}
		relateAcrossR28To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR28To((NoncontainingShape_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR28To(NoncontainingShape_c target) {
		if (target != null) {
			target.relateAcrossR28To(this, true);
		}
	}

	public void relateAcrossR28To(NoncontainingShape_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR28To(this, notifyChanges);
		}
	}

	public void setBackPointerR28To(NoncontainingShape_c target) {
		backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28 = target;
	}

	public void unrelateAcrossR28From(NoncontainingShape_c target) {
		if (target != null) {
			target.unrelateAcrossR28From(this, true);
		}
	}

	public void unrelateAcrossR28From(NoncontainingShape_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR28From(this, notifyChanges);
		}
	}

	public void clearBackPointerR28To(NoncontainingShape_c target) {
		if (target == backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28) {
			backPointer_IsSubtypeNoncontainingShapeIsSubtype_R28 = null;
		}
	}

	public static Shape_c getOneGD_SHPOnR28(NoncontainingShape_c[] targets) {
		return getOneGD_SHPOnR28(targets, null);
	}

	public static Shape_c getOneGD_SHPOnR28(NoncontainingShape_c[] targets,
			ClassQueryInterface_c test) {
		return getOneGD_SHPOnR28(targets, test, true);
	}

	public static Shape_c getOneGD_SHPOnR28(NoncontainingShape_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Shape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Shape_c candidate_val = getOneGD_SHPOnR28(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneGD_SHPOnR28(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Shape_c getOneGD_SHPOnR28(NoncontainingShape_c target) {
		return getOneGD_SHPOnR28(target, true);
	}
	public static Shape_c getOneGD_SHPOnR28(NoncontainingShape_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeShape;
		} else {
			return null;
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR28(targets, test, true);
	}

	public static Shape_c [] getManyGD_SHPsOnR28(NoncontainingShape_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Shape_c[0];
  
  
  LinkedHashSet<Shape_c> elementsSet = new LinkedHashSet<Shape_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeShape == null)
	  targets[i].loadProxy();
    Shape_c associate = targets[i].IsSupertypeShape;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Shape_c[] result = new Shape_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c[] targets) {
		return getManyGD_SHPsOnR28(targets, null);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			NoncontainingShape_c[] targetArray = new NoncontainingShape_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR28(targetArray, test, loadComponent);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}

	}

	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c target,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR28(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c target) {
		return getManyGD_SHPsOnR28(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(NoncontainingShape_c target,
			boolean loadComponent) {
		return getManyGD_SHPsOnR28(target, null, loadComponent);
	}

	// referred to navigation

	ContainingShape_c backPointer_IsSubtypeContainingShapeIsSubtype_R28;

	public void setContainingShapeOrderInChildListR28(ContainingShape_c target,
			int index) {
		unrelateAcrossR28From(target);
		ContainingShape_c[] elements = ContainingShape_c
				.getManyGD_CTRsOnR28(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR28From((ContainingShape_c) elements[i]);
			}
			count++;
		}
		relateAcrossR28To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR28To((ContainingShape_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR28To(ContainingShape_c target) {
		if (target != null) {
			target.relateAcrossR28To(this, true);
		}
	}

	public void relateAcrossR28To(ContainingShape_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR28To(this, notifyChanges);
		}
	}

	public void setBackPointerR28To(ContainingShape_c target) {
		backPointer_IsSubtypeContainingShapeIsSubtype_R28 = target;
	}

	public void unrelateAcrossR28From(ContainingShape_c target) {
		if (target != null) {
			target.unrelateAcrossR28From(this, true);
		}
	}

	public void unrelateAcrossR28From(ContainingShape_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR28From(this, notifyChanges);
		}
	}

	public void clearBackPointerR28To(ContainingShape_c target) {
		if (target == backPointer_IsSubtypeContainingShapeIsSubtype_R28) {
			backPointer_IsSubtypeContainingShapeIsSubtype_R28 = null;
		}
	}

	public static Shape_c getOneGD_SHPOnR28(ContainingShape_c[] targets) {
		return getOneGD_SHPOnR28(targets, null);
	}

	public static Shape_c getOneGD_SHPOnR28(ContainingShape_c[] targets,
			ClassQueryInterface_c test) {
		return getOneGD_SHPOnR28(targets, test, true);
	}

	public static Shape_c getOneGD_SHPOnR28(ContainingShape_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Shape_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Shape_c candidate_val = getOneGD_SHPOnR28(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneGD_SHPOnR28(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Shape_c getOneGD_SHPOnR28(ContainingShape_c target) {
		return getOneGD_SHPOnR28(target, true);
	}
	public static Shape_c getOneGD_SHPOnR28(ContainingShape_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeShape;
		} else {
			return null;
		}
	}

	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c[] targets,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR28(targets, test, true);
	}

	public static Shape_c [] getManyGD_SHPsOnR28(ContainingShape_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Shape_c[0];
  
  
  LinkedHashSet<Shape_c> elementsSet = new LinkedHashSet<Shape_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeShape == null)
	  targets[i].loadProxy();
    Shape_c associate = targets[i].IsSupertypeShape;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Shape_c[] result = new Shape_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c[] targets) {
		return getManyGD_SHPsOnR28(targets, null);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ContainingShape_c[] targetArray = new ContainingShape_c[1];
			targetArray[0] = target;
			return getManyGD_SHPsOnR28(targetArray, test, loadComponent);
		} else {
			Shape_c[] result = new Shape_c[0];
			return result;
		}

	}

	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c target,
			ClassQueryInterface_c test) {
		return getManyGD_SHPsOnR28(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c target) {
		return getManyGD_SHPsOnR28(target, null, true);
	}

	public static Shape_c[] getManyGD_SHPsOnR28(ContainingShape_c target,
			boolean loadComponent) {
		return getManyGD_SHPsOnR28(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R19
		Graphnode_c relInst22124 = (Graphnode_c) baseRoot.getInstanceList(
				Graphnode_c.class).get(new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22124 == null) {
			relInst22124 = (Graphnode_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Graphnode_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst22124 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22124) && !isProxy())) {
				relInst22124.relateAcrossR19To(this, notifyChanges);
			}
		}

		// R2
		GraphicalElement_c relInst22125 = (GraphicalElement_c) baseRoot
				.getInstanceList(GraphicalElement_c.class).get(
						new Object[]{m_elementid});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst22125 == null) {
			relInst22125 = (GraphicalElement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(GraphicalElement_c.class)
					.get(new Object[]{m_elementid});
		}
		//synchronized
		if (relInst22125 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst22125) && !isProxy())) {
				relInst22125.relateAcrossR2To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R19
		// DIM_ND
		inst = IsSupertypeGraphnode;
		unrelateAcrossR19From(IsSupertypeGraphnode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R2
		// GD_GE
		inst = IsSupertypeGraphicalElement;
		unrelateAcrossR2From(IsSupertypeGraphicalElement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Shape_c inst = (Shape_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Shape_c ShapeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Shape_c result = findShapeInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Shape_c findShapeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Shape_c x = (Shape_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Shape_c ShapeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ShapeInstance(modelRoot, test, true);
	}

	public static Shape_c ShapeInstance(ModelRoot modelRoot) {
		return ShapeInstance(modelRoot, null, true);
	}

	public static Shape_c[] ShapeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Shape_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Shape_c x = (Shape_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Shape_c[] ret_set = new Shape_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Shape_c[0];
			}
		}
	}
	public static Shape_c[] ShapeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ShapeInstances(modelRoot, test, true);
	}
	public static Shape_c[] ShapeInstances(ModelRoot modelRoot) {
		return ShapeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Shape.dispose call: ";
		Graphnode_c testR19Inst1 = Graphnode_c.getOneDIM_NDOnR19(this, false);

		if (testR19Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "19 ";
		}
		GraphicalElement_c testR2Inst1 = GraphicalElement_c.getOneGD_GEOnR2(
				this, false);

		if (testR2Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "2 ";
		}
		FloatingText_c testR27Inst = FloatingText_c.getOneGD_CTXTOnR27(this,
				false);

		if (testR27Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "27 ";
		}
		NoncontainingShape_c testR28Inst1 = NoncontainingShape_c
				.getOneGD_NCSOnR28(this, false);

		if (testR28Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "28 ";
		}
		ContainingShape_c testR28Inst2 = ContainingShape_c.getOneGD_CTROnR28(
				this, false);

		if (testR28Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "28 ";
		}
		if (delete_error == true) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.DELETE, "Shape", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CanvasPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("elementid")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getElementidLongBased() {
		if (IsSupertypeGraphnode != null) {
			return IsSupertypeGraphnode.getElementidLongBased();
		}
		if (IsSupertypeGraphicalElement != null) {
			return IsSupertypeGraphicalElement.getElementidLongBased();
		}
		return 0;
	}
	public java.util.UUID getElementid() {
		if (IsSupertypeGraphnode != null) {
			return IsSupertypeGraphnode.getElementid();
		}
		if (IsSupertypeGraphicalElement != null) {
			return IsSupertypeGraphicalElement.getElementid();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeGraphnode != null);

	}

	public java.util.UUID getElementidCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_elementid))
			return m_elementid;
		else
			return getElementid();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Shape", //$NON-NLS-1$
				" Operation entered: Shape::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Shape_c[] objs = Shape_c.ShapeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Shape", //$NON-NLS-1$
				" Operation entered: Shape::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Shape_c_test22127_c implements ClassQueryInterface_c {
			Shape_c_test22127_c(java.util.UUID p22128) {
				m_p22128 = p22128;
			}
			private java.util.UUID m_p22128;
			public boolean evaluate(Object candidate) {
				Shape_c selected = (Shape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22128));
				return retval;
			}
		}

		Shape_c[] objs22126 = Shape_c.ShapeInstances(modelRoot,
				new Shape_c_test22127_c(getElementid()));

		if (((objs22126.length) == 0)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape", //$NON-NLS-1$
								"Consistency: Object: Shape: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22126.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Shape: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs22126.length), e);
			}
			retval = false;

		}

		if (((objs22126.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log.println(ILogger.CONSISTENCY, "Shape", //$NON-NLS-1$
						"Consistency: Object: Shape: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs22126.length)
								+ " elementId: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin.logError(
						"Consistency: Object: Shape: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs22126.length)
								+ " elementId: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Shape is a subtype in association: rel.Numb = 19
		// The supertype class is: GraphNode
		class Graphnode_c_test22132_c implements ClassQueryInterface_c {
			Graphnode_c_test22132_c(java.util.UUID p22133) {
				m_p22133 = p22133;
			}
			private java.util.UUID m_p22133;
			public boolean evaluate(Object candidate) {
				Graphnode_c selected = (Graphnode_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22133));
				return retval;
			}
		}

		Graphnode_c[] objs22131 = Graphnode_c.GraphnodeInstances(modelRoot,
				new Graphnode_c_test22132_c(getElementid()));

		if (((objs22131.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape", //$NON-NLS-1$
								"Consistency: Object: Shape: Association: 19: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22131.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape: Association: 19: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22131.length), e);
			}
			retval = false;

		}

		// Shape is a subtype in association: rel.Numb = 2
		// The supertype class is: Graphical Element
		class GraphicalElement_c_test22135_c implements ClassQueryInterface_c {
			GraphicalElement_c_test22135_c(java.util.UUID p22136) {
				m_p22136 = p22136;
			}
			private java.util.UUID m_p22136;
			public boolean evaluate(Object candidate) {
				GraphicalElement_c selected = (GraphicalElement_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22136));
				return retval;
			}
		}

		GraphicalElement_c[] objs22134 = GraphicalElement_c
				.GraphicalElementInstances(modelRoot,
						new GraphicalElement_c_test22135_c(getElementid()));

		if (((objs22134.length) != 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape", //$NON-NLS-1$
								"Consistency: Object: Shape: Association: 2: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22134.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape: Association: 2: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22134.length), e);
			}
			retval = false;

		}

		// Shape is a participating class in association: rel.Numb = 27
		// Object: Floating Text
		class FloatingText_c_test22138_c implements ClassQueryInterface_c {
			FloatingText_c_test22138_c(java.util.UUID p22139) {
				m_p22139 = p22139;
			}
			private java.util.UUID m_p22139;
			public boolean evaluate(Object candidate) {
				FloatingText_c selected = (FloatingText_c) candidate;
				boolean retval = false;
				retval = (selected.getConn_elementid().equals(m_p22139));
				return retval;
			}
		}

		FloatingText_c[] objs22137 = FloatingText_c.FloatingTextInstances(
				modelRoot, new FloatingText_c_test22138_c(getElementid()));

		if (((objs22137.length) > 1)) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape", //$NON-NLS-1$
								"Consistency: Object: Shape: Association: 27: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22137.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape: Association: 27: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22137.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 28
		int objs22140 = 0;
		// Subtype Object: NonContaining Shape
		class NoncontainingShape_c_test22141_c implements ClassQueryInterface_c {
			NoncontainingShape_c_test22141_c(java.util.UUID p22142) {
				m_p22142 = p22142;
			}
			private java.util.UUID m_p22142;
			public boolean evaluate(Object candidate) {
				NoncontainingShape_c selected = (NoncontainingShape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22142));
				return retval;
			}
		}

		NoncontainingShape_c[] objs22143 = NoncontainingShape_c
				.NoncontainingShapeInstances(modelRoot,
						new NoncontainingShape_c_test22141_c(getElementid()));

		objs22140 = objs22140 + objs22143.length;
		// Subtype Object: Containing Shape
		class ContainingShape_c_test22144_c implements ClassQueryInterface_c {
			ContainingShape_c_test22144_c(java.util.UUID p22145) {
				m_p22145 = p22145;
			}
			private java.util.UUID m_p22145;
			public boolean evaluate(Object candidate) {
				ContainingShape_c selected = (ContainingShape_c) candidate;
				boolean retval = false;
				retval = (selected.getElementid().equals(m_p22145));
				return retval;
			}
		}

		ContainingShape_c[] objs22146 = ContainingShape_c
				.ContainingShapeInstances(modelRoot,
						new ContainingShape_c_test22144_c(getElementid()));

		objs22140 = objs22140 + objs22146.length;
		if (objs22140 != 1) {

			if (CanvasPlugin.getDefault().isDebugging()) {
				Ooaofgraphics.log
						.println(ILogger.CONSISTENCY,
								"Shape", //$NON-NLS-1$
								"Consistency: Object: Shape: Association: 28: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs22140)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CanvasPlugin
						.logError(
								"Consistency: Object: Shape: Association: 28: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs22140), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Draw(final GCDelegate p_Context,
			final boolean p_Disable_selection) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Draw");
		final ModelRoot modelRoot = getModelRoot();
		int v_tabHeightRatio = 5;

		int v_tabWidthRatio = 10;

		GraphicalElement_c v_shape = GraphicalElement_c.getOneGD_GEOnR2(this);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		Model_c v_canvas = Model_c.getOneGD_MDOnR1(v_shape);

		ElementSpecification_c v_elemSpec = ElementSpecification_c
				.getOneGD_ESOnR10(v_shape);

		boolean v_fill = (!v_elemSpec.getIstransparent());

		float v_x = v_graphElement.getPositionx();

		float v_y = v_graphElement.getPositiony();

		float v_w = v_graphNode.getWidth();

		float v_h = v_graphNode.getHeight();

		float v_lastAvailableVerticalPosn = v_y + v_h;

		if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.RoundBox)) {

			Gr_c.Drawroundrect(p_Context, (int) (v_h), (int) (v_w),
					(int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Component)) {

			Gr_c.Drawrect(p_Context, v_fill, (int) (v_h), (int) (v_w),
					(int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Folder)) {

			float v_tabHeight = v_h / v_tabHeightRatio;

			if ((v_w < v_h * 2)) {

				v_tabHeight = v_w / v_tabWidthRatio;

			}

			Gr_c.Drawfolder(p_Context, (int) (v_h), (int) (v_tabHeight),
					(int) (v_w), (int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.FilledCircle)) {

			float v_r = v_graphNode.getWidth() / 2;

			float v_center_x = v_x + v_r;

			float v_center_y = v_y + v_r;

			if (((v_graphNode.getHeight() / 2) < v_r)) {

				v_r = v_graphNode.getHeight() / 2;

				v_center_y = v_y + v_r;

			}

			Gr_c.Drawcircle(p_Context, true, (int) (v_r), (int) (v_center_x),
					(int) (v_center_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.BullsEye)) {

			float v_r = v_graphNode.getWidth() / 2;

			float v_center_x = v_x + v_r;

			float v_center_y = v_y + v_r;

			if (((v_graphNode.getHeight() / 2) < v_r)) {

				v_r = v_graphNode.getHeight() / 2;

				v_center_y = v_y + v_r;

			}

			Gr_c.Drawcircle(p_Context, false, (int) (v_r), (int) (v_center_x),
					(int) (v_center_y));

			Gr_c.Drawcircle(p_Context, true, (int) (v_r / 1.5f),
					(int) (v_center_x), (int) (v_center_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.CircleCross)) {

			float v_r = v_graphNode.getWidth() / 2;

			float v_center_x = v_x + v_r;

			float v_center_y = v_y + v_r;

			if (((v_graphNode.getHeight() / 2) < v_r)) {

				v_r = v_graphNode.getHeight() / 2;

				v_center_y = v_y + v_r;

			}

			Gr_c.Drawcircle(p_Context, false, (int) (v_r), (int) (v_center_x),
					(int) (v_center_y));

			float v_rcos45 = 0.7071067811865476f * v_r;

			Gr_c.Drawline(p_Context,
					Ooaofgraphics.Round(modelRoot, v_center_x + v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_x - v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_y + v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_y - v_rcos45));

			Gr_c.Drawline(p_Context,
					Ooaofgraphics.Round(modelRoot, v_center_x + v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_x - v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_y - v_rcos45),
					Ooaofgraphics.Round(modelRoot, v_center_y + v_rcos45));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Diamond)) {

			Ooaofgraphics.Drawdiamond(modelRoot, p_Context, (int) (v_h),
					(int) (v_w), (int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConcavePentagon)) {

			Ooaofgraphics.Drawconcavepentagon(modelRoot, p_Context,
					(int) (v_h), (int) (v_w), (int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConvexPentagon)) {

			Ooaofgraphics.Drawconvexpentagon(modelRoot, p_Context, (int) (v_h),
					(int) (v_w), (int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Hourglass)) {

			Ooaofgraphics.Drawhourglass(modelRoot, p_Context, (int) (v_h),
					(int) (v_w), (int) (v_x), (int) (v_y));

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.StickFigure)) {

			float v_width = Os_c.Inttoreal(v_elemSpec.getDefaultwidth());

			float v_height = Os_c.Inttoreal(v_elemSpec.getDefaultheight());

			String v_actorName = Cl_c.Getcompartmenttext(
					Justification_c.Center_in_X, 2, 1, v_shape.getRepresents());

			int v_Y_extent = Gr_c.Gettextextent(Axis_c.Y, p_Context,
					v_actorName);

			float v_actorHeight = v_h;

			float v_actorWidth = v_w;

			float v_actorX = v_x;

			if ((v_Y_extent < (v_h / 4)) && (!v_actorName.equals(""))) {

				v_actorHeight = v_h - v_Y_extent - 10;

				v_actorWidth = (v_width * v_actorHeight) / v_height;

				v_actorX = v_x + ((v_w - v_actorWidth) / 2);

			}

			Gr_c.Drawactor(p_Context, (int) (v_actorHeight),
					(int) (v_actorWidth), (int) (v_actorX), (int) (v_y));

			v_y = v_y + v_actorHeight;

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Ellipse)) {

			Gr_c.Drawellipse(p_Context, (int) (v_h), (int) (v_w), (int) (v_x),
					(int) (v_y));

		}

		else {

			Gr_c.Drawrect(p_Context, v_fill, (int) (v_h), (int) (v_w),
					(int) (v_x), (int) (v_y));

		}

		if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Folder)) {

			float v_tabHeight = v_h / v_tabHeightRatio;

			if ((v_w < v_h * 2)) {

				v_tabHeight = v_w / v_tabWidthRatio;

			}

			v_y = v_y + v_tabHeight;

			v_h = v_h - v_tabHeight;

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConcavePentagon)) {

			float v_flagSize = v_w / 5;

			v_x = v_x + v_flagSize;

			v_w = v_w - v_flagSize;

		}

		else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConvexPentagon)) {

			float v_flagSize = v_w / 5;

			v_w = v_w - v_flagSize;

		}

		Gr_c.Clipto(p_Context, (int) (v_h), (int) (v_w), (int) (v_x),
				(int) (v_y));

		int v_compartment_id = 1;

		int v_unScaledSpacing = Gr_c.Getgraphicspacing();

		int v_spacing = Gr_c.Scale(v_unScaledSpacing);

		if ((!v_elemSpec.getHasnamecompartment())) {

			int v_compartments = Cl_c.Getcompartments(v_shape.getRepresents());

			while ((v_compartment_id <= v_compartments)) {

				int v_entry_id = 1;

				float v_compartmentTopY = v_y;

				int v_entries = Cl_c.Getentries(v_compartment_id,
						v_shape.getRepresents());

				while ((v_entry_id <= v_entries)) {

					String v_leftResult = Cl_c.Getcompartmenttext(
							Justification_c.Left, v_compartment_id, v_entry_id,
							v_shape.getRepresents());

					int v_leftStyle = Cl_c.Gettextstyle(Justification_c.Left,
							v_compartment_id, v_entry_id,
							v_shape.getRepresents());

					String v_rightResult = Cl_c.Getcompartmenttext(
							Justification_c.Right, v_compartment_id,
							v_entry_id, v_shape.getRepresents());

					int v_rightStyle = Cl_c.Gettextstyle(Justification_c.Right,
							v_compartment_id, v_entry_id,
							v_shape.getRepresents());

					int v_availableRHSpace = Gr_c.Gettextextent(Axis_c.X,
							p_Context, v_rightResult);

					if ((!v_rightResult.equals(""))) {

						int v_widthLeftForLeftText = v_availableRHSpace
								+ v_spacing;

						if ((v_w - v_widthLeftForLeftText > 36)) {

							v_leftResult = Gr_c.Fittextto(p_Context, true,
									v_leftResult,
									(int) (v_w - v_widthLeftForLeftText));

						}

						else {

							v_availableRHSpace = (int) (v_w / 2 - v_spacing);

							v_leftResult = Gr_c.Fittextto(p_Context, true,
									v_leftResult, v_availableRHSpace);

						}

					}

					int v_Y_extent = 0;

					if ((!v_leftResult.equals(""))) {

						int v_single_line_height = Gr_c.Gettextextent(Axis_c.Y,
								p_Context, "entry/");

						float v_numLines = v_h / v_single_line_height;

						v_leftResult = Ooaofgraphics.Truncatetextblock(
								modelRoot, (int) (v_numLines), v_leftResult);

						v_leftResult = Gr_c.Fittextto(p_Context, true,
								v_leftResult,
								(int) (v_w - (v_unScaledSpacing * 2)));

						float v_verticalPosnAfterPrinting = v_y
								+ Gr_c.Gettextextent(Axis_c.Y, p_Context,
										v_leftResult);

						if (((v_verticalPosnAfterPrinting + v_single_line_height < v_lastAvailableVerticalPosn) || (v_entries == 1 && Os_c
								.Ismultiline(v_leftResult)))) {

							Gr_c.Drawtext(p_Context, Justification_c.Left,
									v_leftResult, v_leftStyle,
									(int) (v_x + v_spacing),
									(int) (v_y + v_spacing));

						} else {
							// only draw the ellipses once
							if(v_verticalPosnAfterPrinting <= v_lastAvailableVerticalPosn) {
								Gr_c.Drawtext(p_Context, Justification_c.Left,
										"...", v_leftStyle,
										(int) (v_x + v_spacing),
										(int) (v_y + v_spacing));
							}
						}

						v_Y_extent = Gr_c.Gettextextent(Axis_c.Y, p_Context,
								v_leftResult);

					}

					if ((!v_rightResult.equals(""))) {

						if ((v_availableRHSpace < Gr_c.Gettextextent(Axis_c.X,
								p_Context, v_rightResult))) {

							v_rightResult = Gr_c.Fittextto(p_Context, true,
									v_rightResult, v_availableRHSpace);

						}

						float v_verticalPosnAfterPrinting = v_y
								+ Gr_c.Gettextextent(Axis_c.Y, p_Context,
										v_rightResult);

						if ((v_verticalPosnAfterPrinting < v_lastAvailableVerticalPosn)) {

							Gr_c.Drawtext(p_Context, Justification_c.Right,
									v_rightResult, v_rightStyle, (int) (v_x
											+ v_w - v_spacing),
									(int) (v_y + v_spacing));

						}

						v_Y_extent = Ooaofgraphics.Max(modelRoot, v_Y_extent,
								Gr_c.Gettextextent(Axis_c.Y, p_Context,
										v_rightResult));

					}

					String v_centerResult = Cl_c.Getcompartmenttext(
							Justification_c.Center_in_X, v_compartment_id,
							v_entry_id, v_shape.getRepresents());

					int v_centerXStyle = Cl_c.Gettextstyle(
							Justification_c.Center_in_X, v_compartment_id,
							v_entry_id, v_shape.getRepresents());

					if ((!v_centerResult.equals(""))) {

						boolean v_elideAtEnd = Cl_c
								.Getelidecompartmenttextatend(v_compartment_id,
										v_shape.getRepresents(), v_entry_id);

						v_centerResult = Gr_c.Fittextto(p_Context,
								v_elideAtEnd, v_centerResult,
								(int) (v_w - (v_unScaledSpacing * 2)));

						float v_verticalPosnAfterPrinting = v_y
								+ Gr_c.Gettextextent(Axis_c.Y, p_Context,
										v_centerResult);

						if ((v_verticalPosnAfterPrinting < v_lastAvailableVerticalPosn)) {

							Gr_c.Drawtext(p_Context,
									Justification_c.Center_in_X,
									v_centerResult, v_centerXStyle,
									(int) (v_x + (v_w / 2)),
									(int) (v_y + v_spacing));

						}

						v_Y_extent = Ooaofgraphics.Max(modelRoot, v_Y_extent,
								Gr_c.Gettextextent(Axis_c.Y, p_Context,
										v_centerResult));

					}

					v_y = v_y + v_Y_extent;

					v_entry_id = v_entry_id + 1;

				}

				if ((v_compartment_id != Cl_c.Getcompartments(v_shape
						.getRepresents()))
						&& ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Box) || (Cl_c
								.Getshapestyle(v_shape.getRepresents()) == Style_c.RoundBox))) {

					v_y = v_y + (v_spacing * 2);

					Gr_c.Drawline(p_Context, (int) (v_x), (int) (v_x + v_w),
							(int) (v_y), (int) (v_y));

				}

				v_compartment_id = v_compartment_id + 1;

			}

			float v_lastVerticalPosn = v_y;

			v_x = v_graphElement.getPositionx();

			v_y = v_graphElement.getPositiony();

			v_w = v_graphNode.getWidth();

			v_h = v_graphNode.getHeight();

			String v_result = Cl_c.Getcompartmenttext(Justification_c.Bottom,
					v_compartment_id, 0, v_shape.getRepresents());

			int v_bottomStyle = Cl_c.Gettextstyle(Justification_c.Bottom,
					v_compartment_id, 0, v_shape.getRepresents());

			if ((!v_result.equals(""))) {

				Gr_c.Drawtext(p_Context, Justification_c.Bottom, v_result,
						v_bottomStyle, (int) (v_x + v_w / 2), (int) (v_y + v_h));

			}

			if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.Folder)) {

				float v_tabHeight = v_h / v_tabHeightRatio;

				if ((v_w < v_h * 2)) {

					v_tabHeight = v_w / v_tabWidthRatio;

				}

				v_y = v_y + v_tabHeight;

				v_h = v_h - v_tabHeight;

			}

			else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConcavePentagon)) {

				float v_flagSize = v_w / 5;

				v_x = v_x + v_flagSize;

				v_w = v_w - v_flagSize;

			}

			else if ((Cl_c.Getshapestyle(v_shape.getRepresents()) == Style_c.ConvexPentagon)) {

				float v_flagSize = v_w / 5;

				v_w = v_w - v_flagSize;

			}

			v_result = Cl_c.Getcompartmenttext(Justification_c.Center,
					v_compartment_id, 0, v_shape.getRepresents());

			int v_centerStyle = Cl_c.Gettextstyle(Justification_c.Center,
					v_compartment_id, 0, v_shape.getRepresents());

			if ((!v_result.equals(""))) {

				boolean v_elideAtEnd = true;

				v_elideAtEnd = Cl_c.Getelidecompartmenttextatend(
						v_compartment_id, v_shape.getRepresents(), 0);

				v_result = Gr_c.Fittextto(p_Context, v_elideAtEnd, v_result,
						(int) (v_w - (v_unScaledSpacing * 2)));

				float v_labelVerticalPosn = v_y
						+ (v_h / 2)
						- (Gr_c.Gettextextent(Axis_c.Y, p_Context, v_result) / 2);

				if ((v_lastVerticalPosn < v_labelVerticalPosn)) {

					Gr_c.Drawtext(p_Context, Justification_c.Center, v_result,
							v_centerStyle, (int) (v_x + (v_w / 2)),
							(int) (v_y + (v_h / 2)));

				}

			}

		}

		Gr_c.Unclip(p_Context);

		if ((Cl_c.Isselected(v_shape.getRepresents()) && !p_Disable_selection)) {

			v_x = v_graphElement.getPositionx();

			v_y = v_graphElement.getPositiony();

			v_w = v_graphNode.getWidth();

			v_h = v_graphNode.getHeight();

			Gr_c.Drawresizehandles(p_Context, (int) (v_h), (int) (v_w),
					(int) (v_x), (int) (v_y));

		}

		if ((v_elemSpec.getHasnamecompartment())) {

			String v_nameCompartmentText = Cl_c.Getnamecompartmenttext(v_shape
					.getRepresents());

			Drawnamecompartment(p_Context, v_fill, v_h, v_nameCompartmentText,
					v_w, v_x, v_y);

		}

		int v_shapeStyle = Cl_c.Getshapestyle(v_shape.getRepresents());

		if ((v_shapeStyle == Style_c.Component)) {

			Drawcomponentminisymbol(p_Context, v_fill, v_h, v_w, v_x, v_y);

		}

	} // End draw
	public boolean Isovernw(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isovernw");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

		float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

		boolean v_result = Gr_c.Iswithinhotspot((int) (v_scaled_x),
				(int) (v_graphElement.getPositionx()), (int) (v_scaled_y),
				(int) (v_graphElement.getPositiony()));

		if ((!v_result)) {

			FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_text != null))) {

				v_result = v_text.Isoververtex((int) (v_scaled_x),
						(int) (v_scaled_y)) == Vertex_c.NW;

			}

		}

		return v_result;

	} // End isOverNW
	public boolean Isoverse(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoverse");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

		float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

		boolean v_result = Gr_c
				.Iswithinhotspot((int) (v_scaled_x), (int) (v_graphElement
						.getPositionx() + v_graphNode.getWidth()),
						(int) (v_scaled_y), (int) (v_graphElement
								.getPositiony() + v_graphNode.getHeight()));

		if ((!v_result)) {

			FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_text != null))) {

				v_result = v_text.Isoververtex((int) (v_scaled_x),
						(int) (v_scaled_y)) == Vertex_c.SE;

			}

		}

		return v_result;

	} // End isOverSE
	public boolean Isoverne(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoverne");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

		float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

		boolean v_result = Gr_c.Iswithinhotspot((int) (v_scaled_x),
				(int) (v_graphElement.getPositionx() + v_graphNode.getWidth()),
				(int) (v_scaled_y), (int) (v_graphElement.getPositiony()));

		if ((!v_result)) {

			FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_text != null))) {

				v_result = v_text.Isoververtex((int) (v_scaled_x),
						(int) (v_scaled_y)) == Vertex_c.NE;

			}

		}

		return v_result;

	} // End isOverNE
	public boolean Isoversw(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoversw");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

		float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

		boolean v_result = Gr_c
				.Iswithinhotspot((int) (v_scaled_x), (int) (v_graphElement
						.getPositionx()), (int) (v_scaled_y),
						(int) (v_graphElement.getPositiony() + v_graphNode
								.getHeight()));

		if ((!v_result)) {

			FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_text != null))) {

				v_result = v_text.Isoververtex((int) (v_scaled_x),
						(int) (v_scaled_y)) == Vertex_c.SW;

			}

		}

		return v_result;

	} // End isOverSW
	public boolean Isoververtex(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoververtex");
		final ModelRoot modelRoot = getModelRoot();
		if ((Isovernw(p_X, p_Y))) {

			return true;

		}

		if ((Isoversw(p_X, p_Y))) {

			return true;

		}

		if ((Isoverne(p_X, p_Y))) {

			return true;

		}

		if ((Isoverse(p_X, p_Y))) {

			return true;

		}

		FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

		if (((v_text != null))) {

			Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
					.getOneGD_GEOnR2(this));

			Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

			float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

			float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

			return v_text.Isoververtex((int) (v_scaled_x), (int) (v_scaled_y)) != Vertex_c.None;

		}

		return false;

	} // End isOverVertex
	public boolean Isover(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isover");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_canvas);

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_x = v_graphElement.getPositionx() - v_diagram.getViewportx();

		float v_y = v_graphElement.getPositiony() - v_diagram.getViewporty();

		float v_w = v_graphNode.getWidth();

		float v_h = v_graphNode.getHeight();

		ContainingShape_c v_containerShp = ContainingShape_c
				.getOneGD_CTROnR28(this);

		if (((v_containerShp != null))) {

			if ((Isoveredge(p_X, p_Y))) {

				return true;

			}

			else {

				if ((Isovernamecompartment(p_X, p_Y))) {

					return true;

				}

			}

		}

		else {

			if ((Gr_c.Scale(p_X) >= v_x && Gr_c.Scale(p_X) <= v_x + v_w)) {

				if ((Gr_c.Scale(p_Y) >= v_y && Gr_c.Scale(p_Y) <= v_y + v_h)) {

					return true;

				}

			}

		}

		FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

		if (((v_text != null))) {

			Model_c v_mdl = Model_c.getOneGD_MDOnR1(GraphicalElement_c
					.getOneGD_GEOnR2(this));

			v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

			float v_scaled_x = Gr_c.Scale(p_X) + v_diagram.getViewportx();

			float v_scaled_y = Gr_c.Scale(p_Y) + v_diagram.getViewporty();

			return v_text.Isover((int) (v_scaled_x), (int) (v_scaled_y));

		}

		return false;

	} // End isOver
	public void Move(final int p_Xdelta, final int p_Ydelta) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Move");
		final ModelRoot modelRoot = getModelRoot();
		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_x = v_graphElement.getPositionx() + p_Xdelta;

		float v_y = v_graphElement.getPositiony() + p_Ydelta;

		if ((v_x == v_graphElement.getPositionx() && v_y == v_graphElement
				.getPositiony())) {

			return;

		}

		float v_deltaX = v_x - v_graphElement.getPositionx();

		if (v_graphElement != null) {
			v_graphElement.setPositionx(v_x);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		float v_deltaY = v_y - v_graphElement.getPositiony();

		if (v_graphElement != null) {
			v_graphElement.setPositiony(v_y);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

		if (((v_text != null))) {

			if (v_text != null) {
				v_text.Move(v_deltaX, v_deltaY);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Connector_c[] v_connectors = Connector_c
				.getManyGD_CONsOnR20(Graphedge_c
						.getManyDIM_EDsOnR320(Graphconnector_c
								.getManyDIM_CONsOnR311(v_graphElement)));

		Connector_c v_connector = null;
		for (int i21316 = 0; i21316 < v_connectors.length; i21316++) {
			v_connector = v_connectors[i21316];

			java.util.UUID v_segmentId = v_connector.Getstartingsegmentid();

			class LineSegment_test21534_c implements ClassQueryInterface_c {
				LineSegment_test21534_c(java.util.UUID p21535) {
					m_p21535 = p21535;
				}
				private java.util.UUID m_p21535;
				public boolean evaluate(Object candidate) {
					LineSegment_c selected = (LineSegment_c) candidate;
					return selected.getElementid().equals(m_p21535);
				}
			}
			LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(
					v_connector, new LineSegment_test21534_c(v_segmentId));

			Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR21(v_segment);

			Waypoint_c v_endWay = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

			float v_angle = Gr_c.Getangle((int) (v_waypoint.getPositionx()),
					(int) (v_endWay.getPositionx()),
					(int) (v_waypoint.getPositiony()),
					(int) (v_endWay.getPositiony()));

			int v_direction = Gr_c.Getdirection(v_angle);

			java.util.UUID v_snapPointId = Getnearestgridsnappointonedge(
					v_waypoint.getPositionx() + v_deltaX,
					v_waypoint.getPositiony() + v_deltaY);

			Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
					Point_c.class).getGlobal(null, v_snapPointId);

			if (v_connector != null) {
				v_connector.Movestart(false,
						(int) (v_snapPoint.getX() - v_waypoint.getPositionx()),
						(int) (v_snapPoint.getY() - v_waypoint.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			LineSegment_c[] v_segments = LineSegment_c
					.getManyGD_LSsOnR6(v_connector);

			int v_segmentCount = (v_segments.length);

			boolean v_performBendpointAdjustment = true;

			if ((v_connector.Isstartselected() && v_connector.Isendselected())) {

				v_performBendpointAdjustment = false;

			}

			if ((v_connector.getRoutingtype() == Routingtype_c.RECTILINEAR
					&& v_segmentCount > 1 && v_performBendpointAdjustment)) {

				if ((v_direction == Direction_c.North || v_direction == Direction_c.South)) {

					if (v_endWay != null) {
						v_endWay.setPositionx(v_endWay.getPositionx()
								+ v_deltaX);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

				else {

					if (v_endWay != null) {
						v_endWay.setPositiony(v_endWay.getPositiony()
								+ v_deltaY);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

			}

			if (v_snapPoint != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_snapPoint.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_snapPoint));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		v_connectors = Connector_c.getManyGD_CONsOnR20(Graphedge_c
				.getManyDIM_EDsOnR321(Graphconnector_c
						.getManyDIM_CONsOnR311(v_graphElement)));

		for (int i21317 = 0; i21317 < v_connectors.length; i21317++) {
			v_connector = v_connectors[i21317];

			java.util.UUID v_segmentId = v_connector.Getendingsegmentid();

			class LineSegment_test21536_c implements ClassQueryInterface_c {
				LineSegment_test21536_c(java.util.UUID p21537) {
					m_p21537 = p21537;
				}
				private java.util.UUID m_p21537;
				public boolean evaluate(Object candidate) {
					LineSegment_c selected = (LineSegment_c) candidate;
					return selected.getElementid().equals(m_p21537);
				}
			}
			LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(
					v_connector, new LineSegment_test21536_c(v_segmentId));

			Waypoint_c v_waypoint = Waypoint_c.getOneDIM_WAYOnR22(v_segment);

			Waypoint_c v_startWay = Waypoint_c.getOneDIM_WAYOnR21(v_segment);

			float v_angle = Gr_c.Getangle((int) (v_waypoint.getPositionx()),
					(int) (v_startWay.getPositionx()),
					(int) (v_waypoint.getPositiony()),
					(int) (v_startWay.getPositiony()));

			int v_direction = Gr_c.Getdirection(v_angle);

			java.util.UUID v_snapPointId = Getnearestgridsnappointonedge(
					v_waypoint.getPositionx() + v_deltaX,
					v_waypoint.getPositiony() + v_deltaY);

			Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
					Point_c.class).getGlobal(null, v_snapPointId);

			if (v_connector != null) {
				v_connector.Moveend(false,
						(int) (v_snapPoint.getX() - v_waypoint.getPositionx()),
						(int) (v_snapPoint.getY() - v_waypoint.getPositiony()));
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			LineSegment_c[] v_segments = LineSegment_c
					.getManyGD_LSsOnR6(v_connector);

			int v_segmentCount = (v_segments.length);

			boolean v_performBendpointAdjustment = true;

			if ((v_connector.Isstartselected() && v_connector.Isendselected())) {

				v_performBendpointAdjustment = false;

			}

			if ((v_connector.getRoutingtype() == Routingtype_c.RECTILINEAR
					&& v_segmentCount > 1 && v_performBendpointAdjustment)) {

				if ((v_direction == Direction_c.North || v_direction == Direction_c.South)) {

					if (v_startWay != null) {
						v_startWay.setPositionx(v_startWay.getPositionx()
								+ v_deltaX);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

				else {

					if (v_startWay != null) {
						v_startWay.setPositiony(v_startWay.getPositiony()
								+ v_deltaY);
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin.logError(
								"Attribute write attempted on null instance.",
								t);
					}

				}

			}

			if (v_snapPoint != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_snapPoint.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_snapPoint));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		ContainingShape_c v_containerShp = ContainingShape_c
				.getOneGD_CTROnR28(this);

		if (((v_containerShp != null))) {

			if (v_containerShp != null) {
				v_containerShp.Move(p_Xdelta, p_Ydelta);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End move
	public boolean Isinside(final int p_H, final int p_W, final int p_X,
			final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isinside");
		final ModelRoot modelRoot = getModelRoot();
		Model_c v_canvas = Model_c.getOneGD_MDOnR1(GraphicalElement_c
				.getOneGD_GEOnR2(this));

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_x = v_graphElement.getPositionx();

		float v_y = v_graphElement.getPositiony();

		float v_w = v_graphNode.getWidth();

		float v_h = v_graphNode.getHeight();

		if ((p_X < v_x && (p_X + p_W > v_x + v_w))) {

			if ((p_Y < v_y && (p_Y + p_H > v_y + v_h))) {

				return true;

			}

		}

		return false;

	} // End isInside
	public void Moveconnectors(final int p_Vertex, final int p_Oldshapeheight,
			final int p_Oldshapewidth, final int p_Oldshapex,
			final int p_Oldshapey, final int p_Xdelta, final int p_Ydelta) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Moveconnectors");
		final ModelRoot modelRoot = getModelRoot();
		Graphelement_c v_elem = Graphelement_c
				.getOneDIM_GEOnR23(GraphicalElement_c.getOneGD_GEOnR2(this));

		Connector_c[] v_connectors = Connector_c
				.getManyGD_CONsOnR20(Graphedge_c
						.getManyDIM_EDsOnR320(Graphconnector_c
								.getManyDIM_CONsOnR311(v_elem)));

		Connector_c v_connector = null;
		for (int i21318 = 0; i21318 < v_connectors.length; i21318++) {
			v_connector = v_connectors[i21318];

			java.util.UUID v_cropToDeltaId = v_connector.Getdeltaforcropto(
					p_Xdelta, p_Ydelta, End_c.Start, p_Oldshapeheight,
					p_Oldshapewidth, p_Oldshapex, p_Oldshapey, p_Vertex);

			Point_c v_cropToDelta = (Point_c) modelRoot.getInstanceList(
					Point_c.class).getGlobal(null, v_cropToDeltaId);

			if ((v_cropToDelta.getX() != 0 || v_cropToDelta.getY() != 0)) {

				if (v_connector != null) {
					v_connector.Movestart(false, (int) (v_cropToDelta.getX()),
							(int) (v_cropToDelta.getY()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				java.util.UUID v_segmentId = v_connector.Getstartingsegmentid();

				class LineSegment_test21538_c implements ClassQueryInterface_c {
					LineSegment_test21538_c(java.util.UUID p21539) {
						m_p21539 = p21539;
					}
					private java.util.UUID m_p21539;
					public boolean evaluate(Object candidate) {
						LineSegment_c selected = (LineSegment_c) candidate;
						return selected.getElementid().equals(m_p21539);
					}
				}
				LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(
						v_connector, new LineSegment_test21538_c(v_segmentId));

				Waypoint_c v_waypoint = Waypoint_c
						.getOneDIM_WAYOnR21(v_segment);

				java.util.UUID v_snapPointId = Getnearestgridsnappointonedge(
						v_waypoint.getPositionx(), v_waypoint.getPositiony());

				Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
						Point_c.class).getGlobal(null, v_snapPointId);

				if (v_connector != null) {
					v_connector.Movestart(false,
							(int) (v_snapPoint.getX() - v_waypoint
									.getPositionx()),
							(int) (v_snapPoint.getY() - v_waypoint
									.getPositiony()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				if (v_snapPoint != null) {
					// get the location of this element in the instance list
					// before deleting
					if (v_snapPoint.delete()) {
						Ooaofgraphics
								.getDefaultInstance()
								.fireModelElementDeleted(
										new BaseModelDelta(
												Modeleventnotification_c.DELTA_DELETE,
												v_snapPoint));
					}
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError("Delete attempted on null instance.", t);
				}

			}

			if (v_cropToDelta != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_cropToDelta.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_cropToDelta));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		v_connectors = Connector_c.getManyGD_CONsOnR20(Graphedge_c
				.getManyDIM_EDsOnR321(Graphconnector_c
						.getManyDIM_CONsOnR311(v_elem)));

		for (int i21319 = 0; i21319 < v_connectors.length; i21319++) {
			v_connector = v_connectors[i21319];

			java.util.UUID v_cropToDeltaId = v_connector.Getdeltaforcropto(
					p_Xdelta, p_Ydelta, End_c.End, p_Oldshapeheight,
					p_Oldshapewidth, p_Oldshapex, p_Oldshapey, p_Vertex);

			Point_c v_cropToDelta = (Point_c) modelRoot.getInstanceList(
					Point_c.class).getGlobal(null, v_cropToDeltaId);

			if ((v_cropToDelta.getX() != 0 || v_cropToDelta.getY() != 0)) {

				if (v_connector != null) {
					v_connector.Moveend(false, (int) (v_cropToDelta.getX()),
							(int) (v_cropToDelta.getY()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				java.util.UUID v_segmentId = v_connector.Getendingsegmentid();

				class LineSegment_test21540_c implements ClassQueryInterface_c {
					LineSegment_test21540_c(java.util.UUID p21541) {
						m_p21541 = p21541;
					}
					private java.util.UUID m_p21541;
					public boolean evaluate(Object candidate) {
						LineSegment_c selected = (LineSegment_c) candidate;
						return selected.getElementid().equals(m_p21541);
					}
				}
				LineSegment_c v_segment = LineSegment_c.getOneGD_LSOnR6(
						v_connector, new LineSegment_test21540_c(v_segmentId));

				Waypoint_c v_waypoint = Waypoint_c
						.getOneDIM_WAYOnR22(v_segment);

				java.util.UUID v_snapPointId = Getnearestgridsnappointonedge(
						v_waypoint.getPositionx(), v_waypoint.getPositiony());

				Point_c v_snapPoint = (Point_c) modelRoot.getInstanceList(
						Point_c.class).getGlobal(null, v_snapPointId);

				if (v_connector != null) {
					v_connector.Moveend(false,
							(int) (v_snapPoint.getX() - v_waypoint
									.getPositionx()),
							(int) (v_snapPoint.getY() - v_waypoint
									.getPositiony()));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

				if (v_snapPoint != null) {
					// get the location of this element in the instance list
					// before deleting
					if (v_snapPoint.delete()) {
						Ooaofgraphics
								.getDefaultInstance()
								.fireModelElementDeleted(
										new BaseModelDelta(
												Modeleventnotification_c.DELTA_DELETE,
												v_snapPoint));
					}
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError("Delete attempted on null instance.", t);
				}

			}

			if (v_cropToDelta != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_cropToDelta.delete()) {
					Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_cropToDelta));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

	} // End moveConnectors
	public void Movevertex(final int p_End, final int p_Vertex,
			final int p_Xdelta, final int p_Ydelta) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Movevertex");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_End == End_c.Floating)) {

			FloatingText_c v_text = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_text != null))) {

				if (v_text != null) {
					v_text.Movevertex(p_Vertex, p_Xdelta, p_Ydelta);
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			return;

		}

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_x1 = v_graphElement.getPositionx();

		float v_y1 = v_graphElement.getPositiony();

		float v_x2 = v_x1 + v_graphNode.getWidth();

		float v_y2 = v_y1 + v_graphNode.getHeight();

		if ((p_Vertex == Vertex_c.NW)) {

			v_x1 = v_x1 + p_Xdelta;

			v_y1 = v_y1 + p_Ydelta;

		}

		else if ((p_Vertex == Vertex_c.SE)) {

			v_x2 = v_x2 + p_Xdelta;

			v_y2 = v_y2 + p_Ydelta;

		}

		else if ((p_Vertex == Vertex_c.NE)) {

			v_x2 = v_x2 + p_Xdelta;

			v_y1 = v_y1 + p_Ydelta;

		}

		else if ((p_Vertex == Vertex_c.SW)) {

			v_x1 = v_x1 + p_Xdelta;

			v_y2 = v_y2 + p_Ydelta;

		}

		ContainingShape_c v_container = ContainingShape_c
				.getOneGD_CTROnR28(this);

		if (((v_container != null))) {

			boolean v_result = v_container.Shapesizeintersectsinnerelements(
					v_x1, v_x2, v_y1, v_y2);

			if ((v_result)) {

				return;

			}

		}

		int v_minSize = Gr_c.Getminshapesize();

		if ((v_x2 - v_x1 >= v_minSize && v_y2 - v_y1 >= v_minSize)) {

			float v_oldX = v_graphElement.getPositionx();

			float v_oldY = v_graphElement.getPositiony();

			float v_oldWidth = v_graphNode.getWidth();

			float v_oldHeight = v_graphNode.getHeight();

			ElementSpecification_c v_spec = ElementSpecification_c
					.getOneGD_ESOnR10(GraphicalElement_c.getOneGD_GEOnR2(this));

			if ((v_spec.getIsfixedaspectratio())) {

				float v_width = Os_c.Inttoreal(v_spec.getDefaultwidth());

				float v_height = Os_c.Inttoreal(v_spec.getDefaultheight());

				float v_newWidth = v_x2 - v_x1;

				float v_newHeight = (v_newWidth * v_width) / v_height;

				if ((p_Vertex == Vertex_c.NW) || (p_Vertex == Vertex_c.NE)) {

					float v_originalHeight = v_y2 - v_y1;

					v_y1 = v_y1 + (v_originalHeight - v_newHeight);

				}

				else {

					v_y2 = v_y1 + v_newHeight;

				}

			}

			float v_dx = v_x1 - v_graphElement.getPositionx();

			if ((v_dx == 0)) {

				v_dx = v_x2
						- (v_graphElement.getPositionx() + v_graphNode
								.getWidth());

			}

			float v_dy = v_y1 - v_graphElement.getPositiony();

			if ((v_dy == 0)) {

				v_dy = v_y2
						- (v_graphElement.getPositiony() + v_graphNode
								.getHeight());

			}

			if (v_graphElement != null) {
				v_graphElement.setPositionx(v_x1);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			if (v_graphElement != null) {
				v_graphElement.setPositiony(v_y1);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			if (v_graphNode != null) {
				v_graphNode.setWidth(v_x2 - v_x1);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			if (v_graphNode != null) {
				v_graphNode.setHeight(v_y2 - v_y1);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Attribute write attempted on null instance.", t);
			}

			if ((v_dx != 0 || v_dy != 0)) {

				Moveconnectors(p_Vertex, (int) (v_oldHeight),
						(int) (v_oldWidth), (int) (v_oldX), (int) (v_oldY),
						(int) (v_dx), (int) (v_dy));

			}

		}

	} // End moveVertex
	public int Getxintersect(final boolean p_Considerline, final int p_X1,
			final int p_X2, final int p_Y1, final int p_Y2) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getxintersect");
		final ModelRoot modelRoot = getModelRoot();
		return Getintersect(Axis_c.X, p_Considerline, p_X1, p_X2, p_Y1, p_Y2);

	} // End getXIntersect
	public int Getyintersect(final boolean p_Considerline, final int p_X1,
			final int p_X2, final int p_Y1, final int p_Y2) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getyintersect");
		final ModelRoot modelRoot = getModelRoot();
		return Getintersect(Axis_c.Y, p_Considerline, p_X1, p_X2, p_Y1, p_Y2);

	} // End getYIntersect
	public int Getintersect(final int p_Axis, final boolean p_Considerline,
			final int p_X1, final int p_X2, final int p_Y1, final int p_Y2) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getintersect");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		int v_style = Cl_c.Getshapestyle(v_ge.getRepresents());

		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		if ((v_style == Style_c.Ellipse)) {

			float v_result_x = Ooaofgraphics
					.Getintersectionofsegmentwithellipse(modelRoot, Axis_c.X,
							true, v_graphNode.getHeight(),
							v_graphNode.getWidth(),
							v_graphElement.getPositionx(),
							v_graphElement.getPositiony(), p_X1, p_X2, p_Y1,
							p_Y2);

			float v_result_y = Ooaofgraphics
					.Getintersectionofsegmentwithellipse(modelRoot, Axis_c.Y,
							true, v_graphNode.getHeight(),
							v_graphNode.getWidth(),
							v_graphElement.getPositionx(),
							v_graphElement.getPositiony(), p_X1, p_X2, p_Y1,
							p_Y2);

			if ((v_result_x != 0) && (v_result_y != 0)) {

				float v_pointx = v_result_x;

				float v_pointy = v_result_y;

				if ((p_Axis == Axis_c.X)) {

					return (int) (v_pointx);

				}

				else {

					return (int) (v_pointy);

				}

			}

		}

		return (int) (Ooaofgraphics.Getintersectionofsegmentwithsquare(
				modelRoot, p_Axis, p_Considerline, v_graphNode.getHeight(),
				v_graphNode.getWidth(), v_graphElement.getPositionx(),
				v_graphElement.getPositiony(), p_X1, p_X2, p_Y1, p_Y2));

	} // End getIntersect
	public void Dispose() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		if (((v_ge != null))) {

			if (v_ge != null) {
				v_ge.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

			if (((v_graphNode != null))) {

				this.unrelateAcrossR19From(v_graphNode);

				if (v_graphNode != null) {
					v_graphNode.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			FloatingText_c v_ctxt = FloatingText_c.getOneGD_CTXTOnR27(this);

			if (((v_ctxt != null))) {

				this.unrelateAcrossR27From(v_ctxt);

				if (v_ctxt != null) {
					v_ctxt.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			ContainingShape_c v_containingShp = ContainingShape_c
					.getOneGD_CTROnR28(this);

			if (((v_containingShp != null))) {

				this.unrelateAcrossR28From(v_containingShp);

				if (v_containingShp != null) {
					// get the location of this element in the instance list
					// before deleting
					if (v_containingShp.delete()) {
						Ooaofgraphics
								.getDefaultInstance()
								.fireModelElementDeleted(
										new BaseModelDelta(
												Modeleventnotification_c.DELTA_DELETE,
												v_containingShp));
					}
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError("Delete attempted on null instance.", t);
				}

			}

			NoncontainingShape_c v_nonContainingShp = NoncontainingShape_c
					.getOneGD_NCSOnR28(this);

			if (((v_nonContainingShp != null))) {

				this.unrelateAcrossR28From(v_nonContainingShp);

				if (v_nonContainingShp != null) {
					// get the location of this element in the instance list
					// before deleting
					if (v_nonContainingShp.delete()) {
						Ooaofgraphics
								.getDefaultInstance()
								.fireModelElementDeleted(
										new BaseModelDelta(
												Modeleventnotification_c.DELTA_DELETE,
												v_nonContainingShp));
					}
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError("Delete attempted on null instance.", t);
				}

			}

			if (delete()) {
				Ooaofgraphics.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose
	public void Movetodefaultposition() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Movetodefaultposition");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		if (((v_ge != null))) {

			Model_c v_mdl = Model_c.getOneGD_MDOnR1(v_ge);

			Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(v_mdl);

			ElementSpecification_c v_es = ElementSpecification_c
					.getOneGD_ESOnR10(v_ge);

			Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

			Graphelement_c v_graphElement = Graphelement_c
					.getOneDIM_GEOnR301(v_graphNode);

			if (((v_mdl != null) && (v_es != null))) {

				int v_spacing = v_es.getDefaultwidth() / 10;

				GraphicalElement_c[] v_ge_set = GraphicalElement_c
						.getManyGD_GEsOnR1(v_mdl);

				if (v_graphElement != null) {
					v_graphElement.setPositionx(v_diagram.getViewportx()
							+ (v_spacing * (v_ge_set.length)));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				if (v_graphElement != null) {
					v_graphElement.setPositiony(v_diagram.getViewporty()
							+ (v_spacing * (v_ge_set.length)));
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				if (v_graphNode != null) {
					v_graphNode.setWidth(v_es.getDefaultwidth());
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

				if (v_graphNode != null) {
					v_graphNode.setHeight(v_es.getDefaultheight());
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin.logError(
							"Attribute write attempted on null instance.", t);
				}

			}

		}

	} // End moveToDefaultPosition
	public java.util.UUID Getnearestgridsnappointonedge(final float p_X,
			final float p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getnearestgridsnappointonedge");
		final ModelRoot modelRoot = getModelRoot();
		Graphelement_c v_elem = Graphelement_c
				.getOneDIM_GEOnR23(GraphicalElement_c.getOneGD_GEOnR2(this));

		Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR301(v_elem);

		float v_x = p_X;

		float v_y = p_Y;

		if ((Ooaofgraphics.Round(modelRoot, v_y) == Ooaofgraphics.Round(
				modelRoot, v_elem.getPositiony()) || Ooaofgraphics.Round(
				modelRoot, v_y) == Ooaofgraphics.Round(modelRoot,
				v_elem.getPositiony() + v_node.getHeight()))) {

			v_x = Ooaofgraphics.Roundtogridsnappointwithinlimits(modelRoot,
					true, (int) (v_elem.getPositionx() + v_node.getWidth()),
					(int) (v_elem.getPositionx()), v_x);

		}

		else {

			v_y = Ooaofgraphics.Roundtogridsnappointwithinlimits(modelRoot,
					true, (int) (v_elem.getPositiony() + v_node.getHeight()),
					(int) (v_elem.getPositiony()), v_y);

		}

		Point_c v_result = new Point_c(modelRoot);
		Ooaofgraphics.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_result));

		if (v_result != null) {
			v_result.setX(v_x);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_result != null) {
			v_result.setY(v_y);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return v_result.getPointid();

	} // End getNearestGridSnapPointOnEdge
	public Object Getrepresents(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getrepresents");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR2(this);

		int v_slotNum = Geticonslotnumover(p_X, p_Y);

		if ((v_slotNum >= 0)) {

			return Cl_c.Geticonrepresents(1, v_element.getRepresents(),
					v_slotNum);

		}

		return v_element.getRepresents();

	} // End getRepresents
	public String Gettooltiptext(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Gettooltiptext");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR2(this);

		int v_slotNum = Geticonslotnumover(p_X, p_Y);

		if ((v_slotNum >= 0)) {

			if ((Cl_c.Shouldcompartmenticonbedrawn(1,
					v_element.getRepresents(), v_slotNum))) {

				if ((v_slotNum == 0)) {

					return "Double-click here to open Instance State Machine Diagram";

				}

				else if ((v_slotNum == 1)) {

					return "Double-click here to open Class State Machine Diagram";

				}

			}

		}

		return "";

	} // End getToolTipText
	public int Geticonslotnumover(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Geticonslotnumover");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_element = GraphicalElement_c.getOneGD_GEOnR2(this);

		int v_iconDistanceFromEdge = Ooaofgraphics
				.Geticondistancefromedge(modelRoot);

		int v_iconSize = Ooaofgraphics.Geticonsize(modelRoot);

		int v_iconSpacing = Ooaofgraphics.Geticonspacing(modelRoot);

		if ((p_Y >= v_iconDistanceFromEdge && p_Y < v_iconDistanceFromEdge
				+ v_iconSize)) {

			int v_numSlots = Cl_c.Getnumcompartmenticonslots(1,
					v_element.getRepresents());

			int v_slotNum = 0;

			while ((v_slotNum < v_numSlots)) {

				int v_iconX = v_iconDistanceFromEdge + v_slotNum
						* (v_iconSize + v_iconSpacing);

				if ((p_X >= v_iconX && p_X < v_iconX + v_iconSize)) {

					return v_slotNum;

				}

				v_slotNum = v_slotNum + 1;

			}

		}

		return -1;

	} // End getIconSlotNumOver
	public boolean Isoverdiagramposition(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoverdiagramposition");
		final ModelRoot modelRoot = getModelRoot();
		Graphnode_c v_graphNode = Graphnode_c.getOneDIM_NDOnR19(this);

		Graphelement_c v_graphElement = Graphelement_c
				.getOneDIM_GEOnR301(v_graphNode);

		float v_x = v_graphElement.getPositionx();

		float v_y = v_graphElement.getPositiony();

		float v_w = v_graphNode.getWidth();

		float v_h = v_graphNode.getHeight();

		return p_X >= v_x && p_X < v_x + v_w && p_Y >= v_y && p_Y < v_y + v_h;

	} // End isOverDiagramPosition
	public void Drawcomponentminisymbol(final GCDelegate p_Context,
			final boolean p_Filled, final float p_H, final float p_W,
			final float p_X, final float p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Drawcomponentminisymbol");
		final ModelRoot modelRoot = getModelRoot();
		Gr_c.Setlinewidth(p_Context, 1);

		Gr_c.Clipto(p_Context, (int) (p_H), (int) (p_W), (int) (p_X),
				(int) (p_Y));

		int v_innerBoxWidth = 25;

		int v_innerBoxHeight = 20;

		float v_innerBoxX = p_X + p_W - (16 + v_innerBoxWidth);

		float v_innerBoxY = p_Y + 16;

		Gr_c.Drawrect(p_Context, p_Filled, v_innerBoxHeight, v_innerBoxWidth,
				(int) (v_innerBoxX), (int) (v_innerBoxY));

		int v_attachedBoxWidth = 12;

		int v_attachedBoxHeight = 6;

		float v_attachedBoxX = v_innerBoxX - (v_attachedBoxWidth / 2);

		float v_attachedBoxY = v_innerBoxY + 2;

		Gr_c.Drawrect(p_Context, p_Filled, v_attachedBoxHeight,
				v_attachedBoxWidth, (int) (v_attachedBoxX),
				(int) (v_attachedBoxY));

		v_attachedBoxY = v_attachedBoxY + v_attachedBoxHeight + 2;

		Gr_c.Drawrect(p_Context, p_Filled, v_attachedBoxHeight,
				v_attachedBoxWidth, (int) (v_attachedBoxX),
				(int) (v_attachedBoxY));

		Gr_c.Unclip(p_Context);

	} // End drawComponentMiniSymbol
	public void Drawnamecompartment(final GCDelegate p_Context,
			final boolean p_Filled, final float p_H, final String p_Text,
			final float p_W, final float p_X, final float p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Drawnamecompartment");
		final ModelRoot modelRoot = getModelRoot();
		int v_width = Gr_c.Gettextextent(Axis_c.X, p_Context, p_Text);

		int v_height = Gr_c.Gettextextent(Axis_c.Y, p_Context, p_Text);

		int v_boxWidth = v_width + 15;

		if ((v_boxWidth > p_W)) {

			v_boxWidth = (int) (p_W);

		}

		int v_boxHeight = v_height + 5;

		if ((v_boxHeight > p_H)) {

			v_boxHeight = (int) (p_H);

		}

		int v_rightSideLength = v_boxHeight / 2;

		int v_bottomLineLength = v_boxWidth - 10;

		float v_bottomLineStartX = p_X;

		float v_bottomLineStartY = p_Y + v_boxHeight;

		float v_bottomLineEndX = p_X + v_bottomLineLength;

		float v_bottomLineEndY = p_Y + v_boxHeight;

		float v_rsStartX = p_X + v_boxWidth;

		float v_rsStartY = p_Y;

		float v_rsEndX = p_X + v_boxWidth;

		float v_rsEndY = p_Y + v_rightSideLength;

		Gr_c.Setlinestyle(p_Context, Style_c.Solid);

		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		if ((v_ge.Isselected())) {

			Gr_c.Setlinewidth(p_Context, 2);

		}

		else {

			Gr_c.Setlinewidth(p_Context, 1);

		}

		Gr_c.Drawline(p_Context, (int) (v_bottomLineStartX),
				(int) (v_bottomLineEndX), (int) (v_bottomLineStartY),
				(int) (v_bottomLineEndY));

		Gr_c.Drawline(p_Context, (int) (v_rsStartX), (int) (v_rsEndX),
				(int) (v_rsStartY), (int) (v_rsEndY));

		Gr_c.Drawline(p_Context, (int) (v_bottomLineEndX), (int) (v_rsEndX),
				(int) (v_bottomLineEndY), (int) (v_rsEndY));

		String v_text = Gr_c.Fittextto(p_Context, true, p_Text, v_boxWidth);

		Gr_c.Drawtext(p_Context, Justification_c.Left, v_text, Style_c.None,
				(int) (p_X + 5), (int) (p_Y));

	} // End drawNameCompartment
	public boolean Isoveredge(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isoveredge");
		final ModelRoot modelRoot = getModelRoot();
		Graphelement_c v_graphElem = Graphelement_c
				.getOneDIM_GEOnR301(Graphnode_c.getOneDIM_NDOnR19(this));

		Graphnode_c v_node = Graphnode_c.getOneDIM_NDOnR19(this);

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(Model_c
				.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this)));

		int v_testX = p_X;

		int v_testY = p_Y;

		int v_positionX = Gr_c
				.Unscale((int) (v_graphElem.getPositionx() - v_diagram
						.getViewportx()));

		int v_positionY = Gr_c
				.Unscale((int) (v_graphElem.getPositiony() - v_diagram
						.getViewporty()));

		int v_h = Gr_c.Unscale((int) (v_node.getHeight()));

		int v_w = Gr_c.Unscale((int) (v_node.getWidth()));

		boolean v_result = Gr_c.Isover(Gr_c.Gethotspotsize(), v_testX,
				v_positionX, v_positionX, v_testY, v_positionY, v_positionY
						+ v_h);

		if ((v_result)) {

			return true;

		}

		v_result = Gr_c.Isover(Gr_c.Gethotspotsize(), v_testX, v_positionX
				+ v_w, v_positionX + v_w, v_testY, v_positionY, v_positionY
				+ v_h);

		if ((v_result)) {

			return true;

		}

		v_result = Gr_c.Isover(Gr_c.Gethotspotsize(), v_testX, v_positionX,
				v_positionX + v_w, v_testY, v_positionY, v_positionY);

		if ((v_result)) {

			return true;

		}

		v_result = Gr_c.Isover(Gr_c.Gethotspotsize(), v_testX, v_positionX,
				v_positionX + v_w, v_testY, v_positionY + v_h, v_positionY
						+ v_h);

		if ((v_result)) {

			return true;

		}

		return false;

	} // End isOverEdge
	public boolean Isovernamecompartment(final int p_X, final int p_Y) {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Isovernamecompartment");
		final ModelRoot modelRoot = getModelRoot();
		Graphelement_c v_element = Graphelement_c
				.getOneDIM_GEOnR301(Graphnode_c.getOneDIM_NDOnR19(this));

		Diagram_c v_diagram = Diagram_c.getOneDIM_DIAOnR18(Model_c
				.getOneGD_MDOnR1(GraphicalElement_c.getOneGD_GEOnR2(this)));

		int v_x = Gr_c.Unscale((int) (v_element.getPositionx() - v_diagram
				.getViewportx()));

		int v_y = Gr_c.Unscale((int) (v_element.getPositiony() - v_diagram
				.getViewporty()));

		int v_w = Getnamecompartmentwidth();

		int v_h = Getnamecompartmentheight();

		if ((p_X >= v_x && p_X <= v_x + v_w)) {

			if ((p_Y >= v_y && p_Y <= v_y + v_h)) {

				return true;

			}

		}

		return false;

	} // End isOverNameCompartment
	public int Getnamecompartmentwidth() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getnamecompartmentwidth");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		String v_text = Cl_c.Getnamecompartmenttext(v_ge.getRepresents());

		return Gr_c.Gettextextent(Axis_c.X, Gr_c.Getcontext(), v_text) + 10;

	} // End getNameCompartmentWidth
	public int Getnamecompartmentheight() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Getnamecompartmentheight");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_ge = GraphicalElement_c.getOneGD_GEOnR2(this);

		String v_text = Cl_c.Getnamecompartmenttext(v_ge.getRepresents());

		return Gr_c.Gettextextent(Axis_c.Y, Gr_c.Getcontext(), v_text) + 5;

	} // End getNameCompartmentHeight
	public int Geticonslotcount() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Geticonslotcount");
		final ModelRoot modelRoot = getModelRoot();
		GraphicalElement_c v_shape = GraphicalElement_c.getOneGD_GEOnR2(this);

		int v_compartment_id = 1;

		int v_compartments = Cl_c.Getcompartments(v_shape.getRepresents());

		int v_numSlots = 0;

		while ((v_compartment_id <= v_compartments)) {

			v_numSlots = v_numSlots
					+ Cl_c.Getnumcompartmenticonslots(v_compartment_id,
							v_shape.getRepresents());

		}

		return v_numSlots;

	} // End getIconSlotCount
	public String Get_name() {
		Ooaofgraphics.log.println(ILogger.OPERATION, "Shape",
				" Operation entered: Shape::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return "Shape";

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Shape
